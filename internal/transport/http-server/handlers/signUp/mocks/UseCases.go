// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	jwt "github.com/undefeel/cloud-storage-backend/internal/lib/jwt"

	services "github.com/undefeel/cloud-storage-backend/internal/services"
)

// UseCases is an autogenerated mock type for the UseCases type
type UseCases struct {
	mock.Mock
}

// SignUp provides a mock function with given fields: ctx, user
func (_m *UseCases) SignUp(ctx context.Context, user *services.User) (jwt.TokenPair, error) {
	ret := _m.Called(ctx, user)

	var r0 jwt.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services.User) (jwt.TokenPair, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services.User) jwt.TokenPair); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(jwt.TokenPair)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCases creates a new instance of UseCases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCases(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCases {
	mock := &UseCases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
