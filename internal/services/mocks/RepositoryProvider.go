// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	services "github.com/undefeel/cloud-storage-backend/internal/services"
)

// RepositoryProvider is an autogenerated mock type for the RepositoryProvider type
type RepositoryProvider struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, us
func (_m *RepositoryProvider) CreateUser(ctx context.Context, us *services.User) (*services.User, error) {
	ret := _m.Called(ctx, us)

	var r0 *services.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services.User) (*services.User, error)); ok {
		return rf(ctx, us)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services.User) *services.User); ok {
		r0 = rf(ctx, us)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services.User) error); ok {
		r1 = rf(ctx, us)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryProvider creates a new instance of RepositoryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryProvider {
	mock := &RepositoryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
