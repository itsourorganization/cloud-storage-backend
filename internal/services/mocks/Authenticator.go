// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	jwt "github.com/undefeel/cloud-storage-backend/internal/lib/jwt"

	uuid "github.com/google/uuid"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

// NewPair provides a mock function with given fields: userID
func (_m *Authenticator) NewPair(userID uuid.UUID) (jwt.TokenPair, error) {
	ret := _m.Called(userID)

	var r0 jwt.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (jwt.TokenPair, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) jwt.TokenPair); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(jwt.TokenPair)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
